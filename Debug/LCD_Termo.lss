
LCD_Termo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008fe  00000992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  00000994  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db2  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce0  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000127d  00000000  00000000  00003682  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cb  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d5  00000000  00000000  0000543b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	4d c0       	rjmp	.+154    	; 0x9e <__bad_interrupt>
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	4b c0       	rjmp	.+150    	; 0x9e <__bad_interrupt>
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	49 c0       	rjmp	.+146    	; 0x9e <__bad_interrupt>
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	47 c0       	rjmp	.+142    	; 0x9e <__bad_interrupt>
  10:	1f c3       	rjmp	.+1598   	; 0x650 <__vector_8>
  12:	ec c2       	rjmp	.+1496   	; 0x5ec <__vector_9>
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	43 c0       	rjmp	.+134    	; 0x9e <__bad_interrupt>
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	41 c0       	rjmp	.+130    	; 0x9e <__bad_interrupt>
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	3f c0       	rjmp	.+126    	; 0x9e <__bad_interrupt>
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	3d c0       	rjmp	.+122    	; 0x9e <__bad_interrupt>
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	6d 65       	ori	r22, 0x5D	; 93
  28:	74 72       	andi	r23, 0x24	; 36
  2a:	6f 6c       	ori	r22, 0xCF	; 207
  2c:	6f 67       	ori	r22, 0x7F	; 127
  2e:	2e 6f       	ori	r18, 0xFE	; 254
  30:	72 67       	ori	r23, 0x72	; 114
  32:	2e 75       	andi	r18, 0x5E	; 94
  34:	61 00       	.word	0x0061	; ????

00000036 <melod2_p>:
  36:	7d dc 06 23 e2 06 4c e8 06 23 e2 06 65 e5 0c 23     }..#..L..#..e..#
  46:	e2 06 5c e0 06 4c e8 0c 65 e5 0c 7d dc 0c 00 00     ..\..L..e..}....
  56:	0c                                                  .

00000057 <char_up_p>:
  57:	04 0e 15 04 04 04 04 04                             ........

0000005f <char_down_p>:
  5f:	04 04 04 04 04 15 0e 04 00                          .........

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	37 d2       	rcall	.+1134   	; 0x50a <main>
  9c:	2e c4       	rjmp	.+2140   	; 0x8fa <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <lcd_read>:

    while ( (c = *s++) ) {
        lcd_putc(c);
    }

}/* lcd_puts */
  a0:	cf 93       	push	r28
  a2:	88 23       	and	r24, r24
  a4:	31 f0       	breq	.+12     	; 0xb2 <lcd_read+0x12>
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  b0:	05 c0       	rjmp	.+10     	; 0xbc <lcd_read+0x1c>
  b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  c6:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	6a d3       	rcall	.+1748   	; 0x7a2 <pcf8574_setoutput>
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	a2 d3       	rcall	.+1860   	; 0x818 <pcf8574_setoutputpinhigh>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_read+0x36>
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	b2 d3       	rcall	.+1892   	; 0x840 <pcf8574_getinputpin>
  dc:	81 11       	cpse	r24, r1
  de:	02 c0       	rjmp	.+4      	; 0xe4 <lcd_read+0x44>
  e0:	c0 e1       	ldi	r28, 0x10	; 16
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_read+0x46>
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	aa d3       	rcall	.+1876   	; 0x840 <pcf8574_getinputpin>
  ec:	81 11       	cpse	r24, r1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0x52>
  f0:	c0 62       	ori	r28, 0x20	; 32
  f2:	66 e0       	ldi	r22, 0x06	; 6
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	a4 d3       	rcall	.+1864   	; 0x840 <pcf8574_getinputpin>
  f8:	81 11       	cpse	r24, r1
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_read+0x5e>
  fc:	c0 64       	ori	r28, 0x40	; 64
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	9e d3       	rcall	.+1852   	; 0x840 <pcf8574_getinputpin>
 104:	81 11       	cpse	r24, r1
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0x6a>
 108:	c0 68       	ori	r28, 0x80	; 128
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	87 d3       	rcall	.+1806   	; 0x81e <pcf8574_setoutputpinlow>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x72>
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	80 d3       	rcall	.+1792   	; 0x818 <pcf8574_setoutputpinhigh>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_read+0x7a>
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 d3       	rcall	.+1824   	; 0x840 <pcf8574_getinputpin>
 120:	81 11       	cpse	r24, r1
 122:	01 c0       	rjmp	.+2      	; 0x126 <lcd_read+0x86>
 124:	c1 60       	ori	r28, 0x01	; 1
 126:	65 e0       	ldi	r22, 0x05	; 5
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	8a d3       	rcall	.+1812   	; 0x840 <pcf8574_getinputpin>
 12c:	81 11       	cpse	r24, r1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <lcd_read+0x92>
 130:	c2 60       	ori	r28, 0x02	; 2
 132:	66 e0       	ldi	r22, 0x06	; 6
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	84 d3       	rcall	.+1800   	; 0x840 <pcf8574_getinputpin>
 138:	81 11       	cpse	r24, r1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <lcd_read+0x9e>
 13c:	c4 60       	ori	r28, 0x04	; 4
 13e:	67 e0       	ldi	r22, 0x07	; 7
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	7e d3       	rcall	.+1788   	; 0x840 <pcf8574_getinputpin>
 144:	81 11       	cpse	r24, r1
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_read+0xaa>
 148:	c8 60       	ori	r28, 0x08	; 8
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	67 d3       	rcall	.+1742   	; 0x81e <pcf8574_setoutputpinlow>
 150:	8c 2f       	mov	r24, r28
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	a3 df       	rcall	.-186    	; 0xa0 <lcd_read>
 15a:	88 23       	and	r24, r24
 15c:	e4 f3       	brlt	.-8      	; 0x156 <lcd_waitbusy>
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_waitbusy+0xc>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	9b df       	rcall	.-202    	; 0xa0 <lcd_read>
 16a:	08 95       	ret

0000016c <toggle_e>:
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	53 d3       	rcall	.+1702   	; 0x818 <pcf8574_setoutputpinhigh>
 172:	00 c0       	rjmp	.+0      	; 0x174 <toggle_e+0x8>
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	52 d3       	rcall	.+1700   	; 0x81e <pcf8574_setoutputpinlow>
 17a:	08 95       	ret

0000017c <lcd_write>:
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
 180:	66 23       	and	r22, r22
 182:	31 f0       	breq	.+12     	; 0x190 <lcd_write+0x14>
 184:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <lcd_write+0x1e>
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 19a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 19e:	8d 7f       	andi	r24, 0xFD	; 253
 1a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1a4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	fb d2       	rcall	.+1526   	; 0x7a2 <pcf8574_setoutput>
 1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b0:	8f 77       	andi	r24, 0x7F	; 127
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ba:	8f 7b       	andi	r24, 0xBF	; 191
 1bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1d4:	cc 23       	and	r28, r28
 1d6:	2c f4       	brge	.+10     	; 0x1e2 <lcd_write+0x66>
 1d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1e2:	c6 ff       	sbrs	r28, 6
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <lcd_write+0x74>
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1f0:	c5 ff       	sbrs	r28, 5
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <lcd_write+0x82>
 1f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1fe:	c4 ff       	sbrs	r28, 4
 200:	05 c0       	rjmp	.+10     	; 0x20c <lcd_write+0x90>
 202:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 206:	80 61       	ori	r24, 0x10	; 16
 208:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 20c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	c7 d2       	rcall	.+1422   	; 0x7a2 <pcf8574_setoutput>
 214:	ab df       	rcall	.-170    	; 0x16c <toggle_e>
 216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 21a:	8f 77       	andi	r24, 0x7F	; 127
 21c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 220:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 224:	8f 7b       	andi	r24, 0xBF	; 191
 226:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 22a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 234:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 23e:	c3 ff       	sbrs	r28, 3
 240:	05 c0       	rjmp	.+10     	; 0x24c <lcd_write+0xd0>
 242:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 246:	80 68       	ori	r24, 0x80	; 128
 248:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 24c:	c2 ff       	sbrs	r28, 2
 24e:	05 c0       	rjmp	.+10     	; 0x25a <lcd_write+0xde>
 250:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 25a:	c1 ff       	sbrs	r28, 1
 25c:	05 c0       	rjmp	.+10     	; 0x268 <lcd_write+0xec>
 25e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 262:	80 62       	ori	r24, 0x20	; 32
 264:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 268:	c0 ff       	sbrs	r28, 0
 26a:	05 c0       	rjmp	.+10     	; 0x276 <lcd_write+0xfa>
 26c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 270:	80 61       	ori	r24, 0x10	; 16
 272:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 276:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	92 d2       	rcall	.+1316   	; 0x7a2 <pcf8574_setoutput>
 27e:	76 df       	rcall	.-276    	; 0x16c <toggle_e>
 280:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 284:	80 61       	ori	r24, 0x10	; 16
 286:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 28a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 28e:	80 62       	ori	r24, 0x20	; 32
 290:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 294:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 29e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 2a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	79 d2       	rcall	.+1266   	; 0x7a2 <pcf8574_setoutput>
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <lcd_command>:
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
 2b8:	4e df       	rcall	.-356    	; 0x156 <lcd_waitbusy>
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8c 2f       	mov	r24, r28
 2be:	5e df       	rcall	.-324    	; 0x17c <lcd_write>
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd_gotoxy>:
 2c4:	61 11       	cpse	r22, r1
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_gotoxy+0xa>
 2c8:	80 58       	subi	r24, 0x80	; 128
 2ca:	f4 df       	rcall	.-24     	; 0x2b4 <lcd_command>
 2cc:	08 95       	ret
 2ce:	80 54       	subi	r24, 0x40	; 64
 2d0:	f1 df       	rcall	.-30     	; 0x2b4 <lcd_command>
 2d2:	08 95       	ret

000002d4 <lcd_clrscr>:
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	ee df       	rcall	.-36     	; 0x2b4 <lcd_command>
 2d8:	08 95       	ret

000002da <lcd_led>:
 2da:	88 23       	and	r24, r24
 2dc:	31 f0       	breq	.+12     	; 0x2ea <lcd_led+0x10>
 2de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2e2:	87 7f       	andi	r24, 0xF7	; 247
 2e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <lcd_led+0x1a>
 2ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 2f4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	53 d2       	rcall	.+1190   	; 0x7a2 <pcf8574_setoutput>
 2fc:	08 95       	ret

000002fe <lcd_home>:
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	d9 df       	rcall	.-78     	; 0x2b4 <lcd_command>
 302:	08 95       	ret

00000304 <lcd_putc>:
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
 308:	26 df       	rcall	.-436    	; 0x156 <lcd_waitbusy>
 30a:	ca 30       	cpi	r28, 0x0A	; 10
 30c:	41 f4       	brne	.+16     	; 0x31e <lcd_putc+0x1a>
 30e:	80 34       	cpi	r24, 0x40	; 64
 310:	10 f0       	brcs	.+4      	; 0x316 <lcd_putc+0x12>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	01 c0       	rjmp	.+2      	; 0x318 <lcd_putc+0x14>
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	80 58       	subi	r24, 0x80	; 128
 31a:	cc df       	rcall	.-104    	; 0x2b4 <lcd_command>
 31c:	0f c0       	rjmp	.+30     	; 0x33c <lcd_putc+0x38>
 31e:	80 31       	cpi	r24, 0x10	; 16
 320:	21 f4       	brne	.+8      	; 0x32a <lcd_putc+0x26>
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	2a df       	rcall	.-428    	; 0x17c <lcd_write>
 328:	05 c0       	rjmp	.+10     	; 0x334 <lcd_putc+0x30>
 32a:	80 35       	cpi	r24, 0x50	; 80
 32c:	19 f4       	brne	.+6      	; 0x334 <lcd_putc+0x30>
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	24 df       	rcall	.-440    	; 0x17c <lcd_write>
 334:	10 df       	rcall	.-480    	; 0x156 <lcd_waitbusy>
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8c 2f       	mov	r24, r28
 33a:	20 df       	rcall	.-448    	; 0x17c <lcd_write>
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <lcd_create_custom_char>:
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	88 30       	cpi	r24, 0x08	; 8
 34a:	80 f4       	brcc	.+32     	; 0x36c <lcd_create_custom_char+0x2c>
 34c:	8b 01       	movw	r16, r22
 34e:	88 0f       	add	r24, r24
 350:	88 0f       	add	r24, r24
 352:	88 0f       	add	r24, r24
 354:	80 5c       	subi	r24, 0xC0	; 192
 356:	ae df       	rcall	.-164    	; 0x2b4 <lcd_command>
 358:	e8 01       	movw	r28, r16
 35a:	08 5f       	subi	r16, 0xF8	; 248
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	89 91       	ld	r24, Y+
 360:	d1 df       	rcall	.-94     	; 0x304 <lcd_putc>
 362:	c0 17       	cp	r28, r16
 364:	d1 07       	cpc	r29, r17
 366:	d9 f7       	brne	.-10     	; 0x35e <lcd_create_custom_char+0x1e>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_create_custom_char+0x2e>
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 37c:	ec 01       	movw	r28, r24
 37e:	21 96       	adiw	r28, 0x01	; 1
 380:	fc 01       	movw	r30, r24
 382:	84 91       	lpm	r24, Z
 384:	88 23       	and	r24, r24
 386:	31 f0       	breq	.+12     	; 0x394 <lcd_puts_p+0x1c>
        lcd_putc(c);
 388:	bd df       	rcall	.-134    	; 0x304 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 38a:	fe 01       	movw	r30, r28
 38c:	84 91       	lpm	r24, Z
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	81 11       	cpse	r24, r1
 392:	fa cf       	rjmp	.-12     	; 0x388 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	18 2f       	mov	r17, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
 3a2:	f7 d1       	rcall	.+1006   	; 0x792 <pcf8574_init>
	#endif

	dataport = 0;
 3a4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 3a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	f9 d1       	rcall	.+1010   	; 0x7a2 <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	9d e7       	ldi	r25, 0x7D	; 125
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

	delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3bc:	80 62       	ori	r24, 0x20	; 32
 3be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3c6:	80 61       	ori	r24, 0x10	; 16
 3c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 3cc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	e7 d1       	rcall	.+974    	; 0x7a2 <pcf8574_setoutput>

    lcd_e_toggle();
 3d4:	cb de       	rcall	.-618    	; 0x16c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	97 e2       	ldi	r25, 0x27	; 39
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_init+0x40>

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */ 
    lcd_e_toggle();      
 3de:	c6 de       	rcall	.-628    	; 0x16c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3e0:	c0 e8       	ldi	r28, 0x80	; 128
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <lcd_init+0x4c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3ea:	c0 de       	rcall	.-640    	; 0x16c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <lcd_init+0x54>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
 3f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 3fc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	cf d1       	rcall	.+926    	; 0x7a2 <pcf8574_setoutput>
    lcd_e_toggle();
 404:	b3 de       	rcall	.-666    	; 0x16c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 406:	21 97       	sbiw	r28, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 40a:	88 e2       	ldi	r24, 0x28	; 40
 40c:	53 df       	rcall	.-346    	; 0x2b4 <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	51 df       	rcall	.-350    	; 0x2b4 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 412:	60 df       	rcall	.-320    	; 0x2d4 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	4e df       	rcall	.-356    	; 0x2b4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 418:	81 2f       	mov	r24, r17
 41a:	4c df       	rcall	.-360    	; 0x2b4 <lcd_command>

}/* lcd_init */
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	08 95       	ret

00000424 <LoadCustomChar>:
	{ 0,O4 }
};


void LoadCustomChar(uint8_t idx,const char fl_zn[])
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	28 97       	sbiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	fb 01       	movw	r30, r22
 43a:	de 01       	movw	r26, r28
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	9e 01       	movw	r18, r28
 440:	27 5f       	subi	r18, 0xF7	; 247
 442:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t a[8];
	for (uint8_t n=0;n<8;n++)
	{
		a[n]=pgm_read_byte(&fl_zn[n]);
 444:	94 91       	lpm	r25, Z
 446:	9d 93       	st	X+, r25
 448:	31 96       	adiw	r30, 0x01	; 1


void LoadCustomChar(uint8_t idx,const char fl_zn[])
{
	uint8_t a[8];
	for (uint8_t n=0;n<8;n++)
 44a:	a2 17       	cp	r26, r18
 44c:	b3 07       	cpc	r27, r19
 44e:	d1 f7       	brne	.-12     	; 0x444 <LoadCustomChar+0x20>
	{
		a[n]=pgm_read_byte(&fl_zn[n]);
	}
	lcd_create_custom_char (idx, a);
 450:	be 01       	movw	r22, r28
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	74 df       	rcall	.-280    	; 0x340 <lcd_create_custom_char>
}
 458:	28 96       	adiw	r28, 0x08	; 8
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <tick>:
uint16_t seconds;

// Timer settings  30.517578125 Hz (F_CPU=80000000)
inline void  tick(void)
{
		ticks++;
 46a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ticks>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ticks>
		if (ticks==30)
 474:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ticks>
 478:	8e 31       	cpi	r24, 0x1E	; 30
 47a:	11 f4       	brne	.+4      	; 0x480 <tick+0x16>
		{
			ticks=0;
 47c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ticks>
 480:	08 95       	ret

00000482 <play_check>:

uint8_t play_melody;

void play_check()
{
	switch (play_melody)
 482:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <play_melody>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	51 f4       	brne	.+20     	; 0x49e <play_check+0x1c>
	{
		case 0:
		break;
		case 1:
//		mus_play(melod2, MEL2,0);
		mus_play_p(melod2_p, MEL2,0);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	6b e0       	ldi	r22, 0x0B	; 11
 48e:	86 e3       	ldi	r24, 0x36	; 54
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	f6 d0       	rcall	.+492    	; 0x680 <mus_play_p>
		if (mus_play_stop)
 494:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <mus_play_stop>
 498:	81 11       	cpse	r24, r1
		{
			play_melody=0;
 49a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <play_melody>
 49e:	08 95       	ret

000004a0 <quick_fn>:
}

void quick_fn(void)
{
  static uint8_t last_tick=255;
  if (last_tick!=ticks)
 4a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ticks>
 4a4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a8:	98 17       	cp	r25, r24
 4aa:	81 f0       	breq	.+32     	; 0x4cc <quick_fn+0x2c>
  {
	last_tick=ticks;
 4ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ticks>
 4b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (last_tick==0)
 4b4:	81 11       	cpse	r24, r1
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <quick_fn+0x2a>
	{
		seconds++;
 4b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <seconds>
 4bc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <seconds+0x1>
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <seconds+0x1>
 4c6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <seconds>
	}
	play_check();
 4ca:	db df       	rcall	.-74     	; 0x482 <play_check>
 4cc:	08 95       	ret

000004ce <pause>:


void pause(uint8_t s)
{
	static uint16_t sec_start=0;
	ticks=1;
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ticks>
	sec_start=seconds+s;
 4d4:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <seconds>
 4d8:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <seconds+0x1>
 4dc:	a9 01       	movw	r20, r18
 4de:	48 0f       	add	r20, r24
 4e0:	51 1d       	adc	r21, r1
 4e2:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <sec_start.2325+0x1>
 4e6:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <sec_start.2325>
	while (sec_start>seconds)
 4ea:	24 17       	cp	r18, r20
 4ec:	35 07       	cpc	r19, r21
 4ee:	60 f4       	brcc	.+24     	; 0x508 <pause+0x3a>
	{
		quick_fn();
 4f0:	d7 df       	rcall	.-82     	; 0x4a0 <quick_fn>
void pause(uint8_t s)
{
	static uint16_t sec_start=0;
	ticks=1;
	sec_start=seconds+s;
	while (sec_start>seconds)
 4f2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <sec_start.2325>
 4f6:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <sec_start.2325+0x1>
 4fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <seconds>
 4fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <seconds+0x1>
 502:	82 17       	cp	r24, r18
 504:	93 07       	cpc	r25, r19
 506:	a0 f3       	brcs	.-24     	; 0x4f0 <pause+0x22>
 508:	08 95       	ret

0000050a <main>:
*/

int main(void)
{
	//init switch
	DDRB |= (1<<PORTB0);
 50a:	b8 9a       	sbi	0x17, 0	; 23
	
	PORTB &= !(1<<PORTB0);
 50c:	88 b3       	in	r24, 0x18	; 24
 50e:	18 ba       	out	0x18, r1	; 24
	//enable internal pull-up button up
	play_melody=0;
 510:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <play_melody>
	seconds=0;
 514:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <seconds+0x1>
 518:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <seconds>
	mus_init();
 51c:	64 d0       	rcall	.+200    	; 0x5e6 <mus_init>
	
	sei();
 51e:	78 94       	sei
	
	//init lcd
	lcd_init(LCD_DISP_ON);
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	3b df       	rcall	.-394    	; 0x39a <lcd_init>

	//lcd go home
	lcd_home();
 524:	ec de       	rcall	.-552    	; 0x2fe <lcd_home>

	uint8_t led = 0;
	lcd_led(led); //set led
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	d8 de       	rcall	.-592    	; 0x2da <lcd_led>
	lcd_puts_P("metrolog.org.ua");
 52a:	86 e2       	ldi	r24, 0x26	; 38
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	24 df       	rcall	.-440    	; 0x378 <lcd_puts_p>
	LoadCustomChar(0,char_down_p);
 530:	6f e5       	ldi	r22, 0x5F	; 95
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	76 df       	rcall	.-276    	; 0x424 <LoadCustomChar>
	LoadCustomChar(1,char_up_p);
 538:	67 e5       	ldi	r22, 0x57	; 87
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	72 df       	rcall	.-284    	; 0x424 <LoadCustomChar>
	lcd_gotoxy(0, 1);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	bf de       	rcall	.-642    	; 0x2c4 <lcd_gotoxy>
	lcd_putc(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	dd de       	rcall	.-582    	; 0x304 <lcd_putc>
	lcd_putc(1);
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	db de       	rcall	.-586    	; 0x304 <lcd_putc>
			//			line %= 2;
//			_delay_ms(10);
		}
*/		
	uint8_t f=0;
	mus_play_p(melod2_p, MEL2,1);	
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	6b e0       	ldi	r22, 0x0B	; 11
 552:	86 e3       	ldi	r24, 0x36	; 54
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	94 d0       	rcall	.+296    	; 0x680 <mus_play_p>
	play_melody=1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <play_melody>
			//			line++;
			//			line %= 2;
//			_delay_ms(10);
		}
*/		
	uint8_t f=0;
 55e:	10 e0       	ldi	r17, 0x00	; 0
	mus_play_p(melod2_p, MEL2,1);	
	play_melody=1;

	while(1) {

		pause(4);
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	b5 df       	rcall	.-150    	; 0x4ce <pause>
//		_delay_ms(4000);
		
		lcd_clrscr();
 564:	b7 de       	rcall	.-658    	; 0x2d4 <lcd_clrscr>
		if (f==16)
 566:	10 31       	cpi	r17, 0x10	; 16
 568:	19 f0       	breq	.+6      	; 0x570 <main+0x66>
		{
			f=0;
		}
		if (f<10)
 56a:	1a 30       	cpi	r17, 0x0A	; 10
 56c:	30 f4       	brcc	.+12     	; 0x57a <main+0x70>
 56e:	01 c0       	rjmp	.+2      	; 0x572 <main+0x68>
//		_delay_ms(4000);
		
		lcd_clrscr();
		if (f==16)
		{
			f=0;
 570:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (f<10)
		{
			lcd_putc('0'+f);
 572:	80 e3       	ldi	r24, 0x30	; 48
 574:	81 0f       	add	r24, r17
 576:	c6 de       	rcall	.-628    	; 0x304 <lcd_putc>
 578:	03 c0       	rjmp	.+6      	; 0x580 <main+0x76>
		} 
		else
		{
			lcd_putc('A'+f-10);
 57a:	87 e3       	ldi	r24, 0x37	; 55
 57c:	81 0f       	add	r24, r17
 57e:	c2 de       	rcall	.-636    	; 0x304 <lcd_putc>
		}
		pause(2);
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	a5 df       	rcall	.-182    	; 0x4ce <pause>
		
//		_delay_ms(2000);		
		lcd_home();
 584:	bc de       	rcall	.-648    	; 0x2fe <lcd_home>
		for (char c='0';c<='9';c++)
 586:	c0 e3       	ldi	r28, 0x30	; 48
		{
			lcd_putc(c);
 588:	8c 2f       	mov	r24, r28
 58a:	bc de       	rcall	.-648    	; 0x304 <lcd_putc>
		}
		pause(2);
		
//		_delay_ms(2000);		
		lcd_home();
		for (char c='0';c<='9';c++)
 58c:	cf 5f       	subi	r28, 0xFF	; 255
 58e:	ca 33       	cpi	r28, 0x3A	; 58
 590:	d9 f7       	brne	.-10     	; 0x588 <main+0x7e>
 592:	c1 e4       	ldi	r28, 0x41	; 65
		{
			lcd_putc(c);
		}
		for (char c='A';c<='F';c++)
		{
			lcd_putc(c);
 594:	8c 2f       	mov	r24, r28
 596:	b6 de       	rcall	.-660    	; 0x304 <lcd_putc>
		lcd_home();
		for (char c='0';c<='9';c++)
		{
			lcd_putc(c);
		}
		for (char c='A';c<='F';c++)
 598:	cf 5f       	subi	r28, 0xFF	; 255
 59a:	c7 34       	cpi	r28, 0x47	; 71
 59c:	d9 f7       	brne	.-10     	; 0x594 <main+0x8a>
		{
			lcd_putc(c);
		}
		lcd_gotoxy(0, 1);
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 de       	rcall	.-736    	; 0x2c4 <lcd_gotoxy>
		for (char c=0;c<=15;c++)
		{
			lcd_putc(c+f*16);
 5a4:	c1 2f       	mov	r28, r17
 5a6:	c2 95       	swap	r28
 5a8:	c0 7f       	andi	r28, 0xF0	; 240
 5aa:	d0 e1       	ldi	r29, 0x10	; 16
 5ac:	dc 0f       	add	r29, r28
 5ae:	8c 2f       	mov	r24, r28
 5b0:	a9 de       	rcall	.-686    	; 0x304 <lcd_putc>
 5b2:	cf 5f       	subi	r28, 0xFF	; 255
		for (char c='A';c<='F';c++)
		{
			lcd_putc(c);
		}
		lcd_gotoxy(0, 1);
		for (char c=0;c<=15;c++)
 5b4:	dc 13       	cpse	r29, r28
 5b6:	fb cf       	rjmp	.-10     	; 0x5ae <main+0xa4>
			lcd_putc(c+f*16);
		}
		
//		lcd_led(led); //set led
//		led = !led; //invert led for next loop
		f++;
 5b8:	1f 5f       	subi	r17, 0xFF	; 255
		//test loop
	}
 5ba:	d2 cf       	rjmp	.-92     	; 0x560 <main+0x56>

000005bc <Timer_Init>:
				note_cnt=0;
			}
			if(note_tone)
			TONE_ON;
			else
			TONE_OFF;
 5bc:	85 e0       	ldi	r24, 0x05	; 5
 5be:	83 bf       	out	0x33, r24	; 51
 5c0:	12 be       	out	0x32, r1	; 50
 5c2:	1f bc       	out	0x2f, r1	; 47
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	8e bd       	out	0x2e, r24	; 46
 5c8:	1d bc       	out	0x2d, r1	; 45
 5ca:	1c bc       	out	0x2c, r1	; 44
 5cc:	17 bc       	out	0x27, r1	; 39
 5ce:	16 bc       	out	0x26, r1	; 38
 5d0:	1b bc       	out	0x2b, r1	; 43
 5d2:	1a bc       	out	0x2a, r1	; 42
 5d4:	19 bc       	out	0x29, r1	; 41
 5d6:	18 bc       	out	0x28, r1	; 40
 5d8:	12 bc       	out	0x22, r1	; 34
 5da:	97 e0       	ldi	r25, 0x07	; 7
 5dc:	95 bd       	out	0x25, r25	; 37
 5de:	14 bc       	out	0x24, r1	; 36
 5e0:	13 bc       	out	0x23, r1	; 35
 5e2:	89 bf       	out	0x39, r24	; 57
 5e4:	08 95       	ret

000005e6 <mus_init>:
 5e6:	a0 9a       	sbi	0x14, 0	; 20
 5e8:	e9 df       	rcall	.-46     	; 0x5bc <Timer_Init>
 5ea:	08 95       	ret

000005ec <__vector_9>:
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	4f 93       	push	r20
 5fc:	5f 93       	push	r21
 5fe:	6f 93       	push	r22
 600:	7f 93       	push	r23
 602:	8f 93       	push	r24
 604:	9f 93       	push	r25
 606:	af 93       	push	r26
 608:	bf 93       	push	r27
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
 60e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <note_leng>
 612:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <note_leng+0x1>
 616:	89 2b       	or	r24, r25
 618:	49 f0       	breq	.+18     	; 0x62c <__vector_9+0x40>
 61a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <note_leng>
 61e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <note_leng+0x1>
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <note_leng+0x1>
 628:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <note_leng>
 62c:	1e df       	rcall	.-452    	; 0x46a <tick>
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_8>:
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <note_tone>
 662:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <note_tone+0x1>
 666:	9d bd       	out	0x2d, r25	; 45
 668:	8c bd       	out	0x2c, r24	; 44
 66a:	95 b3       	in	r25, 0x15	; 21
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	89 27       	eor	r24, r25
 670:	85 bb       	out	0x15, r24	; 21
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <mus_play_p>:
		}
	}
}

void mus_play_p(const note_t* ntp, uint8_t cnt,uint8_t start)
{
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	00 d0       	rcall	.+0      	; 0x688 <mus_play_p+0x8>
 688:	1f 92       	push	r1
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	16 2f       	mov	r17, r22
	static uint8_t pause=0;
	if (start==1)
 690:	41 30       	cpi	r20, 0x01	; 1
 692:	e9 f4       	brne	.+58     	; 0x6ce <mus_play_p+0x4e>
	{
		note_t nt;
		memcpy_P(&nt,&ntp[0],sizeof(nt));
 694:	43 e0       	ldi	r20, 0x03	; 3
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	bc 01       	movw	r22, r24
 69a:	ce 01       	movw	r24, r28
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	24 d1       	rcall	.+584    	; 0x8e8 <memcpy_P>
		
		note_tone=nt.tone;
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	9a 81       	ldd	r25, Y+2	; 0x02
 6a4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <note_tone+0x1>
 6a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <note_tone>
		note_leng=nt.leng;
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <note_leng+0x1>
 6b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <note_leng>
		TONE_ON;
 6b8:	89 b7       	in	r24, 0x39	; 57
 6ba:	84 60       	ori	r24, 0x04	; 4
 6bc:	89 bf       	out	0x39, r24	; 57
		note_cnt=1;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <note_cnt>
		pause=1;
 6c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <pause.1934>
		mus_play_stop=0;
 6c8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <mus_play_stop>
 6cc:	5b c0       	rjmp	.+182    	; 0x784 <mus_play_p+0x104>
	}
	else
	{
		if (note_leng==0)
 6ce:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <note_leng>
 6d2:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <note_leng+0x1>
 6d6:	45 2b       	or	r20, r21
 6d8:	09 f0       	breq	.+2      	; 0x6dc <mus_play_p+0x5c>
 6da:	54 c0       	rjmp	.+168    	; 0x784 <mus_play_p+0x104>
		{
			if (note_cnt==0)
 6dc:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <note_cnt>
 6e0:	61 11       	cpse	r22, r1
 6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <mus_play_p+0x78>
			{
				PORTB ^= (1<<PORTB0);
 6e4:	88 b3       	in	r24, 0x18	; 24
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	89 27       	eor	r24, r25
 6ea:	88 bb       	out	0x18, r24	; 24
				mus_play_stop=1;
 6ec:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <mus_play_stop>
				TONE_OFF;
 6f0:	89 b7       	in	r24, 0x39	; 57
 6f2:	8b 7f       	andi	r24, 0xFB	; 251
 6f4:	89 bf       	out	0x39, r24	; 57
				return;
 6f6:	46 c0       	rjmp	.+140    	; 0x784 <mus_play_p+0x104>
			}
			if(pause++&1)
 6f8:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <pause.1934>
 6fc:	31 e0       	ldi	r19, 0x01	; 1
 6fe:	32 0f       	add	r19, r18
 700:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <pause.1934>
 704:	20 ff       	sbrs	r18, 0
 706:	0b c0       	rjmp	.+22     	; 0x71e <mus_play_p+0x9e>
			{
				note_tone=0;
 708:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <note_tone+0x1>
 70c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <note_tone>
				note_leng=1;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <note_leng+0x1>
 718:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <note_leng>
 71c:	20 c0       	rjmp	.+64     	; 0x75e <mus_play_p+0xde>
			}
			else
			{
				note_t nt;
				memcpy_P(&nt,&ntp[note_cnt],sizeof(nt));
 71e:	26 2f       	mov	r18, r22
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	b9 01       	movw	r22, r18
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	62 0f       	add	r22, r18
 72a:	73 1f       	adc	r23, r19
 72c:	68 0f       	add	r22, r24
 72e:	79 1f       	adc	r23, r25
 730:	43 e0       	ldi	r20, 0x03	; 3
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	ce 01       	movw	r24, r28
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	d7 d0       	rcall	.+430    	; 0x8e8 <memcpy_P>

				note_tone=nt.tone;
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <note_tone+0x1>
 742:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <note_tone>
				note_leng=nt.leng-1; //minus pause
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <note_leng+0x1>
 750:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <note_leng>
				note_cnt++;
 754:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <note_cnt>
 758:	8f 5f       	subi	r24, 0xFF	; 255
 75a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <note_cnt>
			}
			if (note_cnt>=cnt)
 75e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <note_cnt>
 762:	81 17       	cp	r24, r17
 764:	10 f0       	brcs	.+4      	; 0x76a <mus_play_p+0xea>
			{
				note_cnt=0;
 766:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <note_cnt>
			}
			if(note_tone)
 76a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <note_tone>
 76e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <note_tone+0x1>
 772:	89 2b       	or	r24, r25
 774:	21 f0       	breq	.+8      	; 0x77e <mus_play_p+0xfe>
			TONE_ON;
 776:	89 b7       	in	r24, 0x39	; 57
 778:	84 60       	ori	r24, 0x04	; 4
 77a:	89 bf       	out	0x39, r24	; 57
 77c:	03 c0       	rjmp	.+6      	; 0x784 <mus_play_p+0x104>
			else
			TONE_OFF;
 77e:	89 b7       	in	r24, 0x39	; 57
 780:	8b 7f       	andi	r24, 0xFB	; 251
 782:	89 bf       	out	0x39, r24	; 57
		}
	}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	08 95       	ret

00000792 <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
 792:	6e d0       	rcall	.+220    	; 0x870 <i2c_init>
 794:	8a e1       	ldi	r24, 0x1A	; 26
 796:	8a 95       	dec	r24
 798:	f1 f7       	brne	.-4      	; 0x796 <pcf8574_init+0x4>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <pcf8574_init+0xa>
 79c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pcf8574_pinstatus>
 7a0:	08 95       	ret

000007a2 <pcf8574_setoutput>:
 7a2:	cf 93       	push	r28
 7a4:	81 11       	cpse	r24, r1
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <pcf8574_setoutput+0x1a>
 7a8:	c6 2f       	mov	r28, r22
 7aa:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <pcf8574_pinstatus>
 7ae:	8e e4       	ldi	r24, 0x4E	; 78
 7b0:	63 d0       	rcall	.+198    	; 0x878 <i2c_start>
 7b2:	8c 2f       	mov	r24, r28
 7b4:	85 d0       	rcall	.+266    	; 0x8c0 <i2c_write>
 7b6:	7e d0       	rcall	.+252    	; 0x8b4 <i2c_stop>
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <pcf8574_setoutput+0x1c>
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 7c6:	81 11       	cpse	r24, r1
 7c8:	21 c0       	rjmp	.+66     	; 0x80c <pcf8574_setoutputpin+0x4a>
 7ca:	68 30       	cpi	r22, 0x08	; 8
 7cc:	08 f5       	brcc	.+66     	; 0x810 <pcf8574_setoutputpin+0x4e>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
 7ce:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pcf8574_pinstatus>
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
 7d2:	44 23       	and	r20, r20
 7d4:	49 f0       	breq	.+18     	; 0x7e8 <pcf8574_setoutputpin+0x26>
 7d6:	c1 e0       	ldi	r28, 0x01	; 1
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <pcf8574_setoutputpin+0x1e>
 7dc:	cc 0f       	add	r28, r28
 7de:	dd 1f       	adc	r29, r29
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <pcf8574_setoutputpin+0x1a>
 7e4:	c8 2b       	or	r28, r24
 7e6:	09 c0       	rjmp	.+18     	; 0x7fa <pcf8574_setoutputpin+0x38>
 7e8:	c1 e0       	ldi	r28, 0x01	; 1
 7ea:	d0 e0       	ldi	r29, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <pcf8574_setoutputpin+0x30>
 7ee:	cc 0f       	add	r28, r28
 7f0:	dd 1f       	adc	r29, r29
 7f2:	6a 95       	dec	r22
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <pcf8574_setoutputpin+0x2c>
 7f6:	c0 95       	com	r28
 7f8:	c8 23       	and	r28, r24
	    pcf8574_pinstatus[deviceid] = b;
 7fa:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <pcf8574_pinstatus>
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 7fe:	8e e4       	ldi	r24, 0x4E	; 78
 800:	3b d0       	rcall	.+118    	; 0x878 <i2c_start>
		i2c_write(b);
 802:	8c 2f       	mov	r24, r28
 804:	5d d0       	rcall	.+186    	; 0x8c0 <i2c_write>
		i2c_stop();
 806:	56 d0       	rcall	.+172    	; 0x8b4 <i2c_stop>
		return 0;
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	03 c0       	rjmp	.+6      	; 0x812 <pcf8574_setoutputpin+0x50>
	}
	return -1;
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	01 c0       	rjmp	.+2      	; 0x812 <pcf8574_setoutputpin+0x50>
 810:	8f ef       	ldi	r24, 0xFF	; 255
}
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	d3 df       	rcall	.-90     	; 0x7c2 <pcf8574_setoutputpin>
}
 81c:	08 95       	ret

0000081e <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	d0 df       	rcall	.-96     	; 0x7c2 <pcf8574_setoutputpin>
}
 822:	08 95       	ret

00000824 <pcf8574_getinput>:


/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
 824:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
 826:	81 11       	cpse	r24, r1
 828:	07 c0       	rjmp	.+14     	; 0x838 <pcf8574_getinput+0x14>
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
 82a:	8f e4       	ldi	r24, 0x4F	; 79
 82c:	25 d0       	rcall	.+74     	; 0x878 <i2c_start>
		data = ~i2c_readNak();
 82e:	55 d0       	rcall	.+170    	; 0x8da <i2c_readNak>
 830:	c8 2f       	mov	r28, r24
 832:	c0 95       	com	r28
		i2c_stop();
 834:	3f d0       	rcall	.+126    	; 0x8b4 <i2c_stop>
 836:	01 c0       	rjmp	.+2      	; 0x83a <pcf8574_getinput+0x16>

/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
	int8_t data = -1;
 838:	cf ef       	ldi	r28, 0xFF	; 255
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
		data = ~i2c_readNak();
		i2c_stop();
	}
	return data;
}
 83a:	8c 2f       	mov	r24, r28
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <pcf8574_getinputpin>:

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
 840:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 842:	81 11       	cpse	r24, r1
 844:	10 c0       	rjmp	.+32     	; 0x866 <pcf8574_getinputpin+0x26>
 846:	68 30       	cpi	r22, 0x08	; 8
 848:	80 f4       	brcc	.+32     	; 0x86a <pcf8574_getinputpin+0x2a>
 84a:	c6 2f       	mov	r28, r22
		data = pcf8574_getinput(deviceid);
 84c:	eb df       	rcall	.-42     	; 0x824 <pcf8574_getinput>
		if(data != -1) {
 84e:	8f 3f       	cpi	r24, 0xFF	; 255
 850:	69 f0       	breq	.+26     	; 0x86c <pcf8574_getinputpin+0x2c>
			data = (data >> pin) & 0b00000001;
 852:	08 2e       	mov	r0, r24
 854:	00 0c       	add	r0, r0
 856:	99 0b       	sbc	r25, r25
 858:	02 c0       	rjmp	.+4      	; 0x85e <pcf8574_getinputpin+0x1e>
 85a:	95 95       	asr	r25
 85c:	87 95       	ror	r24
 85e:	ca 95       	dec	r28
 860:	e2 f7       	brpl	.-8      	; 0x85a <pcf8574_getinputpin+0x1a>
 862:	81 70       	andi	r24, 0x01	; 1
 864:	03 c0       	rjmp	.+6      	; 0x86c <pcf8574_getinputpin+0x2c>

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	01 c0       	rjmp	.+2      	; 0x86c <pcf8574_getinputpin+0x2c>
 86a:	8f ef       	ldi	r24, 0xFF	; 255
		if(data != -1) {
			data = (data >> pin) & 0b00000001;
		}
	}
	return data;
}
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 870:	11 b8       	out	0x01, r1	; 1
 872:	88 e8       	ldi	r24, 0x88	; 136
 874:	80 b9       	out	0x00, r24	; 0
 876:	08 95       	ret

00000878 <i2c_start>:
 878:	94 ea       	ldi	r25, 0xA4	; 164
 87a:	96 bf       	out	0x36, r25	; 54
 87c:	06 b6       	in	r0, 0x36	; 54
 87e:	07 fe       	sbrs	r0, 7
 880:	fd cf       	rjmp	.-6      	; 0x87c <i2c_start+0x4>
 882:	91 b1       	in	r25, 0x01	; 1
 884:	98 7f       	andi	r25, 0xF8	; 248
 886:	98 30       	cpi	r25, 0x08	; 8
 888:	11 f0       	breq	.+4      	; 0x88e <i2c_start+0x16>
 88a:	90 31       	cpi	r25, 0x10	; 16
 88c:	79 f4       	brne	.+30     	; 0x8ac <i2c_start+0x34>
 88e:	83 b9       	out	0x03, r24	; 3
 890:	84 e8       	ldi	r24, 0x84	; 132
 892:	86 bf       	out	0x36, r24	; 54
 894:	06 b6       	in	r0, 0x36	; 54
 896:	07 fe       	sbrs	r0, 7
 898:	fd cf       	rjmp	.-6      	; 0x894 <i2c_start+0x1c>
 89a:	91 b1       	in	r25, 0x01	; 1
 89c:	98 7f       	andi	r25, 0xF8	; 248
 89e:	98 31       	cpi	r25, 0x18	; 24
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <i2c_start+0x38>
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	90 34       	cpi	r25, 0x40	; 64
 8a6:	29 f4       	brne	.+10     	; 0x8b2 <i2c_start+0x3a>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	08 95       	ret
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	08 95       	ret
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret

000008b4 <i2c_stop>:
 8b4:	84 e9       	ldi	r24, 0x94	; 148
 8b6:	86 bf       	out	0x36, r24	; 54
 8b8:	06 b6       	in	r0, 0x36	; 54
 8ba:	04 fc       	sbrc	r0, 4
 8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <i2c_stop+0x4>
 8be:	08 95       	ret

000008c0 <i2c_write>:
 8c0:	83 b9       	out	0x03, r24	; 3
 8c2:	84 e8       	ldi	r24, 0x84	; 132
 8c4:	86 bf       	out	0x36, r24	; 54
 8c6:	06 b6       	in	r0, 0x36	; 54
 8c8:	07 fe       	sbrs	r0, 7
 8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <i2c_write+0x6>
 8cc:	91 b1       	in	r25, 0x01	; 1
 8ce:	98 7f       	andi	r25, 0xF8	; 248
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	98 32       	cpi	r25, 0x28	; 40
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <i2c_write+0x18>
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	08 95       	ret

000008da <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 8da:	84 e8       	ldi	r24, 0x84	; 132
 8dc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 8de:	06 b6       	in	r0, 0x36	; 54
 8e0:	07 fe       	sbrs	r0, 7
 8e2:	fd cf       	rjmp	.-6      	; 0x8de <i2c_readNak+0x4>
	
    return TWDR;
 8e4:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 8e6:	08 95       	ret

000008e8 <memcpy_P>:
 8e8:	fb 01       	movw	r30, r22
 8ea:	dc 01       	movw	r26, r24
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <memcpy_P+0xa>
 8ee:	05 90       	lpm	r0, Z+
 8f0:	0d 92       	st	X+, r0
 8f2:	41 50       	subi	r20, 0x01	; 1
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	d8 f7       	brcc	.-10     	; 0x8ee <memcpy_P+0x6>
 8f8:	08 95       	ret

000008fa <_exit>:
 8fa:	f8 94       	cli

000008fc <__stop_program>:
 8fc:	ff cf       	rjmp	.-2      	; 0x8fc <__stop_program>
